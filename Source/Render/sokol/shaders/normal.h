#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input normal_texture.glsl --output normal.h --slang glsl330:glsl100:glsl300es:metal_macos --format=sokol --reflection --ifdef --module normal

    Overview:

        Shader program 'program':
            Get shader desc: normal_program_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_normal_vs_vs_position = 0
                    ATTR_normal_vs_vs_normal = 1
                    ATTR_normal_vs_vs_texcoord0 = 2
                Uniform block 'normal_texture_vs_params':
                    C struct: normal_normal_texture_vs_params_t
                    Bind slot: SLOT_normal_normal_texture_vs_params = 0
            Fragment shader: fs
                Uniform block 'normal_texture_fs_params':
                    C struct: normal_normal_texture_fs_params_t
                    Bind slot: SLOT_normal_normal_texture_fs_params = 0
                Image 'un_tex0':
                    Type: SG_IMAGETYPE_2D
                    Sample Type: SG_IMAGESAMPLETYPE_FLOAT
                    Bind slot: SLOT_normal_un_tex0 = 0
                Sampler 'un_sampler0':
                    Type: SG_SAMPLERTYPE_FILTERING
                    Bind slot: SLOT_normal_un_sampler0 = 0
                Image Sampler Pair 'un_tex0_un_sampler0':
                    Image: un_tex0
                    Sampler: un_sampler0


    Shader descriptor structs:

        sg_shader program = sg_make_shader(normal_program_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_normal_vs_vs_position] = { ... },
                    [ATTR_normal_vs_vs_normal] = { ... },
                    [ATTR_normal_vs_vs_texcoord0] = { ... },
                },
            },
            ...});


    Image bind slots, use as index in sg_bindings.vs.images[] or .fs.images[]

        SLOT_normal_un_tex0 = 0;

    Sampler bind slots, use as index in sg_bindings.vs.sampler[] or .fs.samplers[]

        SLOT_normal_un_sampler0 = 0;

    Bind slot and C-struct for uniform block 'normal_texture_vs_params':

        normal_normal_texture_vs_params_t normal_texture_vs_params = {
            .un_mvp = ...;
            .model = ...;
            .tex0_mat = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_normal_normal_texture_vs_params, &SG_RANGE(normal_texture_vs_params));

    Bind slot and C-struct for uniform block 'normal_texture_fs_params':

        normal_normal_texture_fs_params_t normal_texture_fs_params = {
            .diffuse = ...;
            .ambient = ...;
            .specular = ...;
            .emissive = ...;
            .light_dir = ...;
            .light_diffuse = ...;
            .light_ambient = ...;
            .light_specular = ...;
            .spec_power = ...;
            .un_alpha_test = ...;
            .material = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_normal_normal_texture_fs_params, &SG_RANGE(normal_texture_fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_normal_vs_vs_position (0)
#define ATTR_normal_vs_vs_normal (1)
#define ATTR_normal_vs_vs_texcoord0 (2)
#define SLOT_normal_un_tex0 (0)
#define SLOT_normal_un_sampler0 (0)
#define SLOT_normal_normal_texture_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct normal_normal_texture_vs_params_t {
    Mat4f un_mvp;
    Mat4f model;
    Mat4f tex0_mat;
} normal_normal_texture_vs_params_t;
#pragma pack(pop)
#define SLOT_normal_normal_texture_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct normal_normal_texture_fs_params_t {
    float diffuse[4];
    float ambient[4];
    float specular[4];
    float emissive[4];
    float light_dir[3];
    uint8_t _pad_76[4];
    float light_diffuse[3];
    uint8_t _pad_92[4];
    float light_ambient[3];
    uint8_t _pad_108[4];
    float light_specular[3];
    float spec_power;
    float un_alpha_test;
    int material;
    uint8_t _pad_136[8];
} normal_normal_texture_fs_params_t;
#pragma pack(pop)
#if defined(SOKOL_GLCORE33)
/*
    #version 330
    
    uniform vec4 normal_texture_vs_params[12];
    layout(location = 0) in vec3 vs_position;
    out vec3 fs_normal;
    layout(location = 1) in vec3 vs_normal;
    out vec2 fs_uv0;
    layout(location = 2) in vec2 vs_texcoord0;
    out vec3 fs_position;
    
    void main()
    {
        gl_Position = mat4(normal_texture_vs_params[0], normal_texture_vs_params[1], normal_texture_vs_params[2], normal_texture_vs_params[3]) * vec4(vs_position, 1.0);
        mat4 _39 = mat4(normal_texture_vs_params[4], normal_texture_vs_params[5], normal_texture_vs_params[6], normal_texture_vs_params[7]);
        fs_normal = (_39 * vec4(vs_normal, 0.0)).xyz;
        fs_uv0 = (mat4(normal_texture_vs_params[8], normal_texture_vs_params[9], normal_texture_vs_params[10], normal_texture_vs_params[11]) * vec4(vs_texcoord0, 1.0, 1.0)).xy;
        fs_position = (_39 * vec4(vs_position, 0.0)).xyz;
    }
    
*/
static const char normal_vs_source_glsl330[839] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x33,0x20,0x76,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x73,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,
    0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x33,
    0x39,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x34,0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,
    0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x28,0x5f,
    0x33,0x39,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,0x28,0x6d,0x61,
    0x74,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x2c,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,
    0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,
    0x5f,0x33,0x39,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,
    0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    struct normal_texture_fs_params
    {
        vec4 diffuse;
        vec4 ambient;
        vec4 specular;
        vec4 emissive;
        vec3 light_dir;
        vec3 light_diffuse;
        vec3 light_ambient;
        vec3 light_specular;
        float spec_power;
        float un_alpha_test;
        int material;
    };
    
    uniform normal_texture_fs_params _121;
    
    uniform sampler2D un_tex0_un_sampler0;
    
    layout(location = 0) out vec4 frag_color;
    in vec2 fs_uv0;
    in vec3 fs_position;
    in vec3 fs_normal;
    
    vec4 phong(vec3 pos, vec3 nrm, vec3 l, vec3 eye, vec3 l_ambient, vec3 l_diffuse, vec3 l_specular, vec3 ambient, vec3 diffuse, vec3 specular, float spec_power)
    {
        vec3 _47 = normalize(nrm);
        float _58 = max(dot(_47, l), 0.0);
        return vec4((l_ambient * ambient + ((l_diffuse * diffuse) * _58)) + ((l_specular * specular) * (pow(max(dot(reflect(-l, _47), normalize(eye - pos)), 0.0), spec_power) * _58)), 1.0);
    }
    
    vec4 gamma(vec4 c)
    {
        return vec4(pow(c.xyz, vec3(0.4545454680919647216796875)), c.w);
    }
    
    void main()
    {
        frag_color = texture(un_tex0_un_sampler0, fs_uv0);
        if (_121.material > 0)
        {
            vec3 param = fs_position;
            vec3 param_1 = fs_normal;
            vec3 param_2 = -_121.light_dir;
            vec3 param_3 = vec3(0.0);
            vec3 param_4 = _121.light_ambient;
            vec3 param_5 = _121.light_diffuse;
            vec3 param_6 = _121.light_specular;
            vec3 param_7 = _121.ambient.xyz;
            vec3 param_8 = _121.diffuse.xyz;
            vec3 param_9 = _121.specular.xyz;
            float param_10 = _121.spec_power;
            vec4 param_11 = phong(param, param_1, param_2, param_3, param_4, param_5, param_6, param_7, param_8, param_9, param_10);
            frag_color *= gamma(param_11);
            frag_color.w *= _121.diffuse.w;
        }
        else
        {
            vec4 _191 = frag_color;
            vec3 _196 = _191.xyz * _121.ambient.xyz;
            frag_color.x = _196.x;
            frag_color.y = _196.y;
            frag_color.z = _196.z;
        }
        if (_121.un_alpha_test >= frag_color.w)
        {
            discard;
        }
    }
    
*/
static const char normal_fs_source_glsl330[2002] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x6d,0x62,0x69,0x65,
    0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x73,0x70,0x65,
    0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,
    0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x66,
    0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x73,0x70,0x65,
    0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,
    0x74,0x65,0x73,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x6d,0x61,
    0x74,0x65,0x72,0x69,0x61,0x6c,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x5f,0x31,0x32,
    0x31,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,
    0x5f,0x75,0x76,0x30,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x66,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x0a,0x76,
    0x65,0x63,0x34,0x20,0x70,0x68,0x6f,0x6e,0x67,0x28,0x76,0x65,0x63,0x33,0x20,0x70,
    0x6f,0x73,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x72,0x6d,0x2c,0x20,0x76,0x65,
    0x63,0x33,0x20,0x6c,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x65,0x79,0x65,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x20,0x6c,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x20,0x6c,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x20,0x6c,0x5f,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x2c,0x20,0x76,0x65,0x63,
    0x33,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6e,0x72,0x6d,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,0x38,0x20,0x3d,0x20,0x6d,
    0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x5f,0x34,0x37,0x2c,0x20,0x6c,0x29,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x6c,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,
    0x20,0x2a,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x20,0x2b,0x20,0x28,0x28,0x6c,
    0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x20,0x2a,0x20,0x64,0x69,0x66,0x66,0x75,
    0x73,0x65,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,
    0x6c,0x5f,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x20,0x2a,0x20,0x73,0x70,0x65,
    0x63,0x75,0x6c,0x61,0x72,0x29,0x20,0x2a,0x20,0x28,0x70,0x6f,0x77,0x28,0x6d,0x61,
    0x78,0x28,0x64,0x6f,0x74,0x28,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x6c,
    0x2c,0x20,0x5f,0x34,0x37,0x29,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,
    0x65,0x28,0x65,0x79,0x65,0x20,0x2d,0x20,0x70,0x6f,0x73,0x29,0x29,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x2c,0x20,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x29,
    0x20,0x2a,0x20,0x5f,0x35,0x38,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x76,0x65,0x63,0x34,0x20,0x67,0x61,0x6d,0x6d,0x61,0x28,0x76,0x65,
    0x63,0x34,0x20,0x63,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x77,0x28,0x63,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x34,0x35,0x34,0x35,0x34,0x35,
    0x34,0x36,0x38,0x30,0x39,0x31,0x39,0x36,0x34,0x37,0x32,0x31,0x36,0x37,0x39,0x36,
    0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x63,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x32,
    0x31,0x2e,0x6d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x20,0x3e,0x20,0x30,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x73,0x5f,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x66,
    0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,
    0x20,0x2d,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,
    0x6c,0x69,0x67,0x68,0x74,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x35,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,
    0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x20,0x3d,
    0x20,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,0x5f,0x73,0x70,0x65,0x63,
    0x75,0x6c,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,0x20,0x3d,0x20,0x5f,0x31,0x32,
    0x31,0x2e,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x38,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x64,0x69,0x66,0x66,0x75,
    0x73,0x65,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x39,0x20,0x3d,0x20,0x5f,
    0x31,0x32,0x31,0x2e,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x2e,0x78,0x79,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,
    0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x31,0x20,0x3d,0x20,0x70,0x68,0x6f,0x6e,0x67,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x36,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x39,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x2a,0x3d,0x20,0x67,0x61,0x6d,0x6d,0x61,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x2a,0x3d,0x20,0x5f,0x31,0x32,0x31,
    0x2e,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,
    0x39,0x31,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,
    0x39,0x36,0x20,0x3d,0x20,0x5f,0x31,0x39,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,
    0x5f,0x31,0x32,0x31,0x2e,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2e,0x78,0x79,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x2e,0x79,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x2e,0x7a,0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x2e,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x32,
    0x31,0x2e,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x20,
    0x3e,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,
    0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
#endif /* SOKOL_GLCORE33 */
#if defined(SOKOL_GLES3)
/*
    #version 100
    
    uniform vec4 normal_texture_vs_params[12];
    attribute vec3 vs_position;
    varying vec3 fs_normal;
    attribute vec3 vs_normal;
    varying vec2 fs_uv0;
    attribute vec2 vs_texcoord0;
    varying vec3 fs_position;
    
    void main()
    {
        gl_Position = mat4(normal_texture_vs_params[0], normal_texture_vs_params[1], normal_texture_vs_params[2], normal_texture_vs_params[3]) * vec4(vs_position, 1.0);
        mat4 _39 = mat4(normal_texture_vs_params[4], normal_texture_vs_params[5], normal_texture_vs_params[6], normal_texture_vs_params[7]);
        fs_normal = (_39 * vec4(vs_normal, 0.0)).xyz;
        fs_uv0 = (mat4(normal_texture_vs_params[8], normal_texture_vs_params[9], normal_texture_vs_params[10], normal_texture_vs_params[11]) * vec4(vs_texcoord0, 1.0, 1.0)).xy;
        fs_position = (_39 * vec4(vs_position, 0.0)).xyz;
    }
    
*/
static const char normal_vs_source_glsl100[809] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,
    0x74,0x65,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,0x65,0x63,
    0x33,0x20,0x66,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x73,0x5f,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,
    0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,
    0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x30,0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,
    0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,
    0x65,0x63,0x34,0x28,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,
    0x5f,0x33,0x39,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x35,0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,
    0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,
    0x28,0x5f,0x33,0x39,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,0x28,
    0x6d,0x61,0x74,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,
    0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x28,0x5f,0x33,0x39,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,
    0x78,0x79,0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    struct normal_texture_fs_params
    {
        highp vec4 diffuse;
        highp vec4 ambient;
        highp vec4 specular;
        highp vec4 emissive;
        highp vec3 light_dir;
        highp vec3 light_diffuse;
        highp vec3 light_ambient;
        highp vec3 light_specular;
        highp float spec_power;
        highp float un_alpha_test;
        int material;
    };
    
    uniform normal_texture_fs_params _121;
    
    uniform highp sampler2D un_tex0_un_sampler0;
    
    varying highp vec2 fs_uv0;
    varying highp vec3 fs_position;
    varying highp vec3 fs_normal;
    
    highp vec4 phong(highp vec3 pos, highp vec3 nrm, highp vec3 l, highp vec3 eye, highp vec3 l_ambient, highp vec3 l_diffuse, highp vec3 l_specular, highp vec3 ambient, highp vec3 diffuse, highp vec3 specular, highp float spec_power)
    {
        highp vec3 _47 = normalize(nrm);
        highp float _58 = max(dot(_47, l), 0.0);
        return vec4((l_ambient * ambient + ((l_diffuse * diffuse) * _58)) + ((l_specular * specular) * (pow(max(dot(reflect(-l, _47), normalize(eye - pos)), 0.0), spec_power) * _58)), 1.0);
    }
    
    highp vec4 gamma(highp vec4 c)
    {
        return vec4(pow(c.xyz, vec3(0.4545454680919647216796875)), c.w);
    }
    
    void main()
    {
        gl_FragData[0] = texture2D(un_tex0_un_sampler0, fs_uv0);
        if (_121.material > 0)
        {
            highp vec3 param = fs_position;
            highp vec3 param_1 = fs_normal;
            highp vec3 param_2 = -_121.light_dir;
            highp vec3 param_3 = vec3(0.0);
            highp vec3 param_4 = _121.light_ambient;
            highp vec3 param_5 = _121.light_diffuse;
            highp vec3 param_6 = _121.light_specular;
            highp vec3 param_7 = _121.ambient.xyz;
            highp vec3 param_8 = _121.diffuse.xyz;
            highp vec3 param_9 = _121.specular.xyz;
            highp float param_10 = _121.spec_power;
            highp vec4 param_11 = phong(param, param_1, param_2, param_3, param_4, param_5, param_6, param_7, param_8, param_9, param_10);
            gl_FragData[0] *= gamma(param_11);
            gl_FragData[0].w *= _121.diffuse.w;
        }
        else
        {
            highp vec4 _191 = gl_FragData[0];
            highp vec3 _196 = _191.xyz * _121.ambient.xyz;
            gl_FragData[0].x = _196.x;
            gl_FragData[0].y = _196.y;
            gl_FragData[0].z = _196.z;
        }
        if (_121.un_alpha_test >= gl_FragData[0].w)
        {
            discard;
        }
    }
    
*/
static const char normal_fs_source_glsl100[2319] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x64,0x69,0x66,
    0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x73,0x70,0x65,
    0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x34,0x20,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,
    0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x61,0x6d,0x62,
    0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x73,0x70,0x65,0x63,0x75,
    0x6c,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x6d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x5f,0x31,0x32,0x31,0x3b,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x79,
    0x69,0x6e,0x67,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,
    0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x3b,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x70,0x68,0x6f,0x6e,0x67,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x6f,0x73,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x6e,0x72,0x6d,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x6c,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x65,0x79,0x65,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x6c,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x2c,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x5f,0x73,0x70,
    0x65,0x63,0x75,0x6c,0x61,0x72,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x33,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2c,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x2c,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x73,0x70,0x65,0x63,0x75,
    0x6c,0x61,0x72,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x34,
    0x37,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6e,0x72,
    0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x35,0x38,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,
    0x74,0x28,0x5f,0x34,0x37,0x2c,0x20,0x6c,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x34,
    0x28,0x28,0x6c,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x20,0x2a,0x20,0x61,0x6d,
    0x62,0x69,0x65,0x6e,0x74,0x20,0x2b,0x20,0x28,0x28,0x6c,0x5f,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x20,0x2a,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x29,0x20,0x2a,
    0x20,0x5f,0x35,0x38,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x6c,0x5f,0x73,0x70,0x65,
    0x63,0x75,0x6c,0x61,0x72,0x20,0x2a,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,
    0x29,0x20,0x2a,0x20,0x28,0x70,0x6f,0x77,0x28,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,
    0x28,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x6c,0x2c,0x20,0x5f,0x34,0x37,
    0x29,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x65,0x79,0x65,
    0x20,0x2d,0x20,0x70,0x6f,0x73,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,
    0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x29,0x20,0x2a,0x20,0x5f,0x35,
    0x38,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x61,0x6d,0x6d,0x61,0x28,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x34,0x28,0x70,
    0x6f,0x77,0x28,0x63,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x34,0x35,0x34,0x35,0x34,0x35,0x34,0x36,0x38,0x30,0x39,0x31,0x39,0x36,0x34,
    0x37,0x32,0x31,0x36,0x37,0x39,0x36,0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x63,0x2e,
    0x77,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,
    0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x32,0x44,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x32,0x31,0x2e,0x6d,
    0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x20,0x3e,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x73,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x66,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,
    0x2d,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x34,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,
    0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,
    0x74,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x36,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,
    0x68,0x74,0x5f,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x61,
    0x6d,0x62,0x69,0x65,0x6e,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x38,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x64,0x69,
    0x66,0x66,0x75,0x73,0x65,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x39,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x73,0x70,0x65,
    0x63,0x75,0x6c,0x61,0x72,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x73,
    0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x31,0x20,0x3d,0x20,0x70,0x68,0x6f,0x6e,0x67,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x35,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x37,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x39,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,
    0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x20,0x2a,0x3d,0x20,0x67,0x61,0x6d,0x6d,
    0x61,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,0x61,0x74,0x61,
    0x5b,0x30,0x5d,0x2e,0x77,0x20,0x2a,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x64,0x69,
    0x66,0x66,0x75,0x73,0x65,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x31,0x39,0x31,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,
    0x61,0x74,0x61,0x5b,0x30,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x39,0x36,0x20,
    0x3d,0x20,0x5f,0x31,0x39,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,0x31,0x32,
    0x31,0x2e,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,0x61,
    0x74,0x61,0x5b,0x30,0x5d,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x2e,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,
    0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x31,0x39,
    0x36,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x46,0x72,0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x2e,0x7a,0x20,0x3d,0x20,
    0x5f,0x31,0x39,0x36,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x32,0x31,0x2e,0x75,0x6e,0x5f,0x61,0x6c,
    0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x20,0x3e,0x3d,0x20,0x67,0x6c,0x5f,0x46,
    0x72,0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x2e,0x77,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,
    0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLES3 */
#if defined(SOKOL_GLES3)
/*
    #version 300 es
    
    uniform vec4 normal_texture_vs_params[12];
    layout(location = 0) in vec3 vs_position;
    out vec3 fs_normal;
    layout(location = 1) in vec3 vs_normal;
    out vec2 fs_uv0;
    layout(location = 2) in vec2 vs_texcoord0;
    out vec3 fs_position;
    
    void main()
    {
        gl_Position = mat4(normal_texture_vs_params[0], normal_texture_vs_params[1], normal_texture_vs_params[2], normal_texture_vs_params[3]) * vec4(vs_position, 1.0);
        mat4 _39 = mat4(normal_texture_vs_params[4], normal_texture_vs_params[5], normal_texture_vs_params[6], normal_texture_vs_params[7]);
        fs_normal = (_39 * vec4(vs_normal, 0.0)).xyz;
        fs_uv0 = (mat4(normal_texture_vs_params[8], normal_texture_vs_params[9], normal_texture_vs_params[10], normal_texture_vs_params[11]) * vec4(vs_texcoord0, 1.0, 1.0)).xy;
        fs_position = (_39 * vec4(vs_position, 0.0)).xyz;
    }
    
*/
static const char normal_vs_source_glsl300es[842] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,
    0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x30,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,
    0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x31,0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,
    0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,
    0x20,0x5f,0x33,0x39,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x35,0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,
    0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,
    0x20,0x28,0x5f,0x33,0x39,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,
    0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,
    0x28,0x6d,0x61,0x74,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,
    0x5d,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x2c,
    0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x28,0x5f,0x33,0x39,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,
    0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    struct normal_texture_fs_params
    {
        highp vec4 diffuse;
        highp vec4 ambient;
        highp vec4 specular;
        highp vec4 emissive;
        highp vec3 light_dir;
        highp vec3 light_diffuse;
        highp vec3 light_ambient;
        highp vec3 light_specular;
        highp float spec_power;
        highp float un_alpha_test;
        int material;
    };
    
    uniform normal_texture_fs_params _121;
    
    uniform highp sampler2D un_tex0_un_sampler0;
    
    layout(location = 0) out highp vec4 frag_color;
    in highp vec2 fs_uv0;
    in highp vec3 fs_position;
    in highp vec3 fs_normal;
    
    highp vec4 phong(highp vec3 pos, highp vec3 nrm, highp vec3 l, highp vec3 eye, highp vec3 l_ambient, highp vec3 l_diffuse, highp vec3 l_specular, highp vec3 ambient, highp vec3 diffuse, highp vec3 specular, highp float spec_power)
    {
        highp vec3 _47 = normalize(nrm);
        highp float _58 = max(dot(_47, l), 0.0);
        return vec4((l_ambient * ambient + ((l_diffuse * diffuse) * _58)) + ((l_specular * specular) * (pow(max(dot(reflect(-l, _47), normalize(eye - pos)), 0.0), spec_power) * _58)), 1.0);
    }
    
    highp vec4 gamma(highp vec4 c)
    {
        return vec4(pow(c.xyz, vec3(0.4545454680919647216796875)), c.w);
    }
    
    void main()
    {
        frag_color = texture(un_tex0_un_sampler0, fs_uv0);
        if (_121.material > 0)
        {
            highp vec3 param = fs_position;
            highp vec3 param_1 = fs_normal;
            highp vec3 param_2 = -_121.light_dir;
            highp vec3 param_3 = vec3(0.0);
            highp vec3 param_4 = _121.light_ambient;
            highp vec3 param_5 = _121.light_diffuse;
            highp vec3 param_6 = _121.light_specular;
            highp vec3 param_7 = _121.ambient.xyz;
            highp vec3 param_8 = _121.diffuse.xyz;
            highp vec3 param_9 = _121.specular.xyz;
            highp float param_10 = _121.spec_power;
            highp vec4 param_11 = phong(param, param_1, param_2, param_3, param_4, param_5, param_6, param_7, param_8, param_9, param_10);
            frag_color *= gamma(param_11);
            frag_color.w *= _121.diffuse.w;
        }
        else
        {
            highp vec4 _191 = frag_color;
            highp vec3 _196 = _191.xyz * _121.ambient.xyz;
            frag_color.x = _196.x;
            frag_color.y = _196.y;
            frag_color.z = _196.z;
        }
        if (_121.un_alpha_test >= frag_color.w)
        {
            discard;
        }
    }
    
*/
static const char normal_fs_source_glsl300es[2321] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,
    0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,
    0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,
    0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,
    0x74,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,
    0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x73,0x70,
    0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,
    0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,
    0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x6d,0x61,0x74,0x65,0x72,
    0x69,0x61,0x6c,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x5f,0x31,0x32,0x31,0x3b,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,
    0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x3b,0x0a,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,
    0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x30,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x33,0x20,0x66,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,
    0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x70,0x68,0x6f,0x6e,0x67,0x28,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x72,0x6d,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x33,0x20,0x65,0x79,0x65,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x33,0x20,0x6c,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2c,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x5f,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x6c,0x5f,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x2c,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2c,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x66,0x66,0x75,
    0x73,0x65,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x73,
    0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,
    0x65,0x28,0x6e,0x72,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,0x38,0x20,0x3d,0x20,0x6d,0x61,
    0x78,0x28,0x64,0x6f,0x74,0x28,0x5f,0x34,0x37,0x2c,0x20,0x6c,0x29,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x76,0x65,0x63,0x34,0x28,0x28,0x6c,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x20,
    0x2a,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x20,0x2b,0x20,0x28,0x28,0x6c,0x5f,
    0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x20,0x2a,0x20,0x64,0x69,0x66,0x66,0x75,0x73,
    0x65,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x6c,
    0x5f,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x20,0x2a,0x20,0x73,0x70,0x65,0x63,
    0x75,0x6c,0x61,0x72,0x29,0x20,0x2a,0x20,0x28,0x70,0x6f,0x77,0x28,0x6d,0x61,0x78,
    0x28,0x64,0x6f,0x74,0x28,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x6c,0x2c,
    0x20,0x5f,0x34,0x37,0x29,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,
    0x28,0x65,0x79,0x65,0x20,0x2d,0x20,0x70,0x6f,0x73,0x29,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x2c,0x20,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x29,0x20,
    0x2a,0x20,0x5f,0x35,0x38,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x61,0x6d,
    0x6d,0x61,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,
    0x63,0x34,0x28,0x70,0x6f,0x77,0x28,0x63,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x34,0x35,0x34,0x35,0x34,0x35,0x34,0x36,0x38,0x30,0x39,
    0x31,0x39,0x36,0x34,0x37,0x32,0x31,0x36,0x37,0x39,0x36,0x38,0x37,0x35,0x29,0x29,
    0x2c,0x20,0x63,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x32,0x31,0x2e,0x6d,0x61,0x74,
    0x65,0x72,0x69,0x61,0x6c,0x20,0x3e,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x73,0x5f,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x20,0x3d,0x20,0x66,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x2d,0x5f,
    0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,
    0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x34,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,0x5f,0x61,
    0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x35,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,0x5f,
    0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x36,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,0x74,
    0x5f,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x37,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x61,0x6d,0x62,
    0x69,0x65,0x6e,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x38,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x39,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x73,0x70,0x65,0x63,0x75,
    0x6c,0x61,0x72,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x31,0x30,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x73,0x70,0x65,
    0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x31,0x20,0x3d,0x20,0x70,0x68,0x6f,0x6e,0x67,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x37,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x39,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x2a,0x3d,0x20,0x67,0x61,0x6d,0x6d,0x61,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x2a,0x3d,0x20,0x5f,
    0x31,0x32,0x31,0x2e,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x2e,0x77,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x39,0x31,0x20,0x3d,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x39,
    0x36,0x20,0x3d,0x20,0x5f,0x31,0x39,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,
    0x31,0x32,0x31,0x2e,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2e,0x78,0x79,0x7a,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x2e,0x79,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x7a,0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x2e,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x32,0x31,
    0x2e,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x20,0x3e,
    0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,
    0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
#endif /* SOKOL_GLES3 */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct normal_texture_vs_params
    {
        float4x4 un_mvp;
        float4x4 model;
        float4x4 tex0_mat;
    };
    
    struct main0_out
    {
        float3 fs_normal [[user(locn0)]];
        float2 fs_uv0 [[user(locn1)]];
        float3 fs_position [[user(locn2)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 vs_position [[attribute(0)]];
        float3 vs_normal [[attribute(1)]];
        float2 vs_texcoord0 [[attribute(2)]];
    };
    
    vertex main0_out main0(main0_in in [[stage_in]], constant normal_texture_vs_params& _19 [[buffer(0)]])
    {
        main0_out out = {};
        out.gl_Position = _19.un_mvp * float4(in.vs_position, 1.0);
        out.fs_normal = (_19.model * float4(in.vs_normal, 0.0)).xyz;
        out.fs_uv0 = (_19.tex0_mat * float4(in.vs_texcoord0, 1.0, 1.0)).xy;
        out.fs_position = (_19.model * float4(in.vs_position, 0.0)).xyz;
        return out;
    }
    
*/
static const char normal_vs_source_metal_macos[910] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x6d,0x6f,0x64,0x65,
    0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x74,0x65,0x78,0x30,0x5f,0x6d,0x61,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,
    0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,
    0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x76,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,
    0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x61,0x6e,0x74,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,
    0x31,0x39,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,
    0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x5f,0x31,0x39,0x2e,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,
    0x28,0x5f,0x31,0x39,0x2e,0x6d,0x6f,0x64,0x65,0x6c,0x20,0x2a,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,0x28,0x5f,
    0x31,0x39,0x2e,0x74,0x65,0x78,0x30,0x5f,0x6d,0x61,0x74,0x20,0x2a,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x5f,0x31,0x39,0x2e,
    0x6d,0x6f,0x64,0x65,0x6c,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,
    0x6e,0x2e,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"
    
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct normal_texture_fs_params
    {
        float4 diffuse;
        float4 ambient;
        float4 specular;
        float4 emissive;
        float3 light_dir;
        float3 light_diffuse;
        float3 light_ambient;
        packed_float3 light_specular;
        float spec_power;
        float un_alpha_test;
        int material;
    };
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float3 fs_normal [[user(locn0)]];
        float2 fs_uv0 [[user(locn1)]];
        float3 fs_position [[user(locn2)]];
    };
    
    static inline __attribute__((always_inline))
    float4 phong(thread const float3& pos, thread const float3& nrm, thread const float3& l, thread const float3& eye, thread const float3& l_ambient, thread const float3& l_diffuse, thread const float3& l_specular, thread const float3& ambient, thread const float3& diffuse, thread const float3& specular, thread const float& spec_power)
    {
        float3 _47 = fast::normalize(nrm);
        float _58 = fast::max(dot(_47, l), 0.0);
        return float4(fma(l_ambient, ambient, (l_diffuse * diffuse) * _58) + ((l_specular * specular) * (pow(fast::max(dot(reflect(-l, _47), fast::normalize(eye - pos)), 0.0), spec_power) * _58)), 1.0);
    }
    
    static inline __attribute__((always_inline))
    float4 gamma(thread const float4& c)
    {
        return float4(pow(c.xyz, float3(0.4545454680919647216796875)), c.w);
    }
    
    fragment main0_out main0(main0_in in [[stage_in]], constant normal_texture_fs_params& _121 [[buffer(0)]], texture2d<float> un_tex0 [[texture(0)]], sampler un_sampler0 [[sampler(0)]])
    {
        main0_out out = {};
        out.frag_color = un_tex0.sample(un_sampler0, in.fs_uv0);
        if (_121.material > 0)
        {
            float3 param = in.fs_position;
            float3 param_1 = in.fs_normal;
            float3 param_2 = -_121.light_dir;
            float3 param_3 = float3(0.0);
            float3 param_4 = _121.light_ambient;
            float3 param_5 = _121.light_diffuse;
            float3 param_6 = float3(_121.light_specular);
            float3 param_7 = _121.ambient.xyz;
            float3 param_8 = _121.diffuse.xyz;
            float3 param_9 = _121.specular.xyz;
            float param_10 = _121.spec_power;
            float4 param_11 = phong(param, param_1, param_2, param_3, param_4, param_5, param_6, param_7, param_8, param_9, param_10);
            out.frag_color *= gamma(param_11);
            out.frag_color.w *= _121.diffuse.w;
        }
        else
        {
            float4 _191 = out.frag_color;
            float3 _196 = _191.xyz * _121.ambient.xyz;
            out.frag_color.x = _196.x;
            out.frag_color.y = _196.y;
            out.frag_color.z = _196.z;
        }
        if (_121.un_alpha_test >= out.frag_color.w)
        {
            discard_fragment();
        }
        return out;
    }
    
*/
static const char normal_fs_source_metal_macos[2768] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x64,0x69,
    0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x65,0x6d,0x69,0x73,0x73,
    0x69,0x76,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x6c,0x69,0x67,0x68,0x74,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x70,0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x70,0x65,0x63,0x5f,
    0x70,0x6f,0x77,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x6d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,
    0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,
    0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,
    0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,
    0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,
    0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,
    0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x70,0x68,0x6f,0x6e,
    0x67,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x70,0x6f,0x73,0x2c,0x20,0x74,0x68,0x72,0x65,
    0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,
    0x20,0x6e,0x72,0x6d,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,
    0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x6c,0x2c,0x20,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x26,0x20,0x65,0x79,0x65,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x6c,0x5f,0x61,
    0x6d,0x62,0x69,0x65,0x6e,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x6c,0x5f,0x64,
    0x69,0x66,0x66,0x75,0x73,0x65,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x6c,0x5f,0x73,
    0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,
    0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x61,0x6d,
    0x62,0x69,0x65,0x6e,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,
    0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,
    0x61,0x72,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,
    0x65,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6e,0x72,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,0x38,0x20,0x3d,0x20,0x66,0x61,0x73,
    0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x5f,0x34,0x37,0x2c,0x20,
    0x6c,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x66,0x6d,0x61,0x28,
    0x6c,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2c,0x20,0x61,0x6d,0x62,0x69,0x65,
    0x6e,0x74,0x2c,0x20,0x28,0x6c,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x20,0x2a,
    0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x29,
    0x20,0x2b,0x20,0x28,0x28,0x6c,0x5f,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x20,
    0x2a,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x29,0x20,0x2a,0x20,0x28,0x70,
    0x6f,0x77,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,
    0x28,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x6c,0x2c,0x20,0x5f,0x34,0x37,
    0x29,0x2c,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,
    0x7a,0x65,0x28,0x65,0x79,0x65,0x20,0x2d,0x20,0x70,0x6f,0x73,0x29,0x29,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x2c,0x20,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,
    0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,
    0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,
    0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,
    0x0a,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x61,0x6d,0x6d,0x61,0x28,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x26,0x20,0x63,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x70,0x6f,0x77,0x28,0x63,0x2e,
    0x78,0x79,0x7a,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x34,0x35,
    0x34,0x35,0x34,0x35,0x34,0x36,0x38,0x30,0x39,0x31,0x39,0x36,0x34,0x37,0x32,0x31,
    0x36,0x37,0x39,0x36,0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x63,0x2e,0x77,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x66,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x31,0x32,0x31,0x20,0x5b,
    0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,
    0x6e,0x5f,0x74,0x65,0x78,0x30,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x20,0x5b,0x5b,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,
    0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x30,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x32,0x31,0x2e,0x6d,
    0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x20,0x3e,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x20,0x3d,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x2d,0x5f,0x31,0x32,0x31,0x2e,
    0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x33,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x6c,0x69,0x67,0x68,
    0x74,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x36,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x31,0x32,0x31,0x2e,
    0x6c,0x69,0x67,0x68,0x74,0x5f,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x61,
    0x6d,0x62,0x69,0x65,0x6e,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x38,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x64,0x69,0x66,0x66,0x75,0x73,
    0x65,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x39,0x20,0x3d,0x20,
    0x5f,0x31,0x32,0x31,0x2e,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x2e,0x78,0x79,
    0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x20,0x3d,0x20,0x5f,0x31,0x32,0x31,
    0x2e,0x73,0x70,0x65,0x63,0x5f,0x70,0x6f,0x77,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x31,0x20,0x3d,0x20,0x70,0x68,0x6f,0x6e,0x67,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x37,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x39,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x3d,0x20,0x67,0x61,0x6d,0x6d,0x61,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x77,0x20,0x2a,0x3d,0x20,0x5f,0x31,0x32,0x31,0x2e,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x31,0x39,0x31,0x20,
    0x3d,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x5f,0x31,0x39,0x36,0x20,0x3d,0x20,0x5f,0x31,0x39,0x31,0x2e,0x78,0x79,0x7a,
    0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x2e,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x2e,
    0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x20,0x3d,0x20,
    0x5f,0x31,0x39,0x36,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x79,
    0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x7a,0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x2e,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x32,0x31,
    0x2e,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x20,0x3e,
    0x3d,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x2e,0x77,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,
    0x6e,0x74,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
#endif /* SOKOL_METAL */
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before normal.h"
#endif
static inline const sg_shader_desc* normal_program_shader_desc(sg_backend backend) {
  #if defined(SOKOL_GLCORE33)
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "vs_position";
      desc.attrs[1].name = "vs_normal";
      desc.attrs[2].name = "vs_texcoord0";
      desc.vs.source = normal_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 192;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "normal_texture_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
      desc.fs.source = normal_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 144;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "_121.diffuse";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[1].name = "_121.ambient";
      desc.fs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[2].name = "_121.specular";
      desc.fs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[3].name = "_121.emissive";
      desc.fs.uniform_blocks[0].uniforms[3].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[3].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[4].name = "_121.light_dir";
      desc.fs.uniform_blocks[0].uniforms[4].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[4].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[5].name = "_121.light_diffuse";
      desc.fs.uniform_blocks[0].uniforms[5].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[5].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[6].name = "_121.light_ambient";
      desc.fs.uniform_blocks[0].uniforms[6].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[6].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[7].name = "_121.light_specular";
      desc.fs.uniform_blocks[0].uniforms[7].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[7].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[8].name = "_121.spec_power";
      desc.fs.uniform_blocks[0].uniforms[8].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[8].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[9].name = "_121.un_alpha_test";
      desc.fs.uniform_blocks[0].uniforms[9].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[9].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[10].name = "_121.material";
      desc.fs.uniform_blocks[0].uniforms[10].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[10].array_count = 1;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.fs.image_sampler_pairs[0].glsl_name = "un_tex0_un_sampler0";
      desc.label = "normal_program_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLCORE33 */
  #if defined(SOKOL_GLES3)
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "vs_position";
      desc.attrs[1].name = "vs_normal";
      desc.attrs[2].name = "vs_texcoord0";
      desc.vs.source = normal_vs_source_glsl100;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 192;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "normal_texture_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
      desc.fs.source = normal_fs_source_glsl100;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 144;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "_121.diffuse";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[1].name = "_121.ambient";
      desc.fs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[2].name = "_121.specular";
      desc.fs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[3].name = "_121.emissive";
      desc.fs.uniform_blocks[0].uniforms[3].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[3].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[4].name = "_121.light_dir";
      desc.fs.uniform_blocks[0].uniforms[4].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[4].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[5].name = "_121.light_diffuse";
      desc.fs.uniform_blocks[0].uniforms[5].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[5].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[6].name = "_121.light_ambient";
      desc.fs.uniform_blocks[0].uniforms[6].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[6].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[7].name = "_121.light_specular";
      desc.fs.uniform_blocks[0].uniforms[7].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[7].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[8].name = "_121.spec_power";
      desc.fs.uniform_blocks[0].uniforms[8].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[8].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[9].name = "_121.un_alpha_test";
      desc.fs.uniform_blocks[0].uniforms[9].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[9].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[10].name = "_121.material";
      desc.fs.uniform_blocks[0].uniforms[10].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[10].array_count = 1;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.fs.image_sampler_pairs[0].glsl_name = "un_tex0_un_sampler0";
      desc.label = "normal_program_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES3 */
  #if defined(SOKOL_GLES3)
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "vs_position";
      desc.attrs[1].name = "vs_normal";
      desc.attrs[2].name = "vs_texcoord0";
      desc.vs.source = normal_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 192;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "normal_texture_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
      desc.fs.source = normal_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 144;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "_121.diffuse";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[1].name = "_121.ambient";
      desc.fs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[2].name = "_121.specular";
      desc.fs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[3].name = "_121.emissive";
      desc.fs.uniform_blocks[0].uniforms[3].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[3].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[4].name = "_121.light_dir";
      desc.fs.uniform_blocks[0].uniforms[4].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[4].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[5].name = "_121.light_diffuse";
      desc.fs.uniform_blocks[0].uniforms[5].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[5].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[6].name = "_121.light_ambient";
      desc.fs.uniform_blocks[0].uniforms[6].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[6].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[7].name = "_121.light_specular";
      desc.fs.uniform_blocks[0].uniforms[7].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[7].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[8].name = "_121.spec_power";
      desc.fs.uniform_blocks[0].uniforms[8].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[8].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[9].name = "_121.un_alpha_test";
      desc.fs.uniform_blocks[0].uniforms[9].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[9].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[10].name = "_121.material";
      desc.fs.uniform_blocks[0].uniforms[10].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[10].array_count = 1;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.fs.image_sampler_pairs[0].glsl_name = "un_tex0_un_sampler0";
      desc.label = "normal_program_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES3 */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = normal_vs_source_metal_macos;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 192;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.source = normal_fs_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.uniform_blocks[0].size = 144;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.label = "normal_program_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  return 0;
}
static inline int normal_program_attr_slot(const char* attr_name) {
  (void)attr_name;
  if (0 == strcmp(attr_name, "vs_position")) {
    return 0;
  }
  if (0 == strcmp(attr_name, "vs_normal")) {
    return 1;
  }
  if (0 == strcmp(attr_name, "vs_texcoord0")) {
    return 2;
  }
  return -1;
}
static inline int normal_program_image_slot(sg_shader_stage stage, const char* img_name) {
  (void)stage; (void)img_name;
  if (SG_SHADERSTAGE_FS == stage) {
    if (0 == strcmp(img_name, "un_tex0")) {
      return 0;
    }
  }
  return -1;
}
static inline int normal_program_sampler_slot(sg_shader_stage stage, const char* smp_name) {
  (void)stage; (void)smp_name;
  if (SG_SHADERSTAGE_FS == stage) {
    if (0 == strcmp(smp_name, "un_sampler0")) {
      return 0;
    }
  }
  return -1;
}
static inline int normal_program_uniformblock_slot(sg_shader_stage stage, const char* ub_name) {
  (void)stage; (void)ub_name;
  if (SG_SHADERSTAGE_VS == stage) {
    if (0 == strcmp(ub_name, "normal_texture_vs_params")) {
      return 0;
    }
  }
  if (SG_SHADERSTAGE_FS == stage) {
    if (0 == strcmp(ub_name, "normal_texture_fs_params")) {
      return 0;
    }
  }
  return -1;
}
static inline size_t normal_program_uniformblock_size(sg_shader_stage stage, const char* ub_name) {
  (void)stage; (void)ub_name;
  if (SG_SHADERSTAGE_VS == stage) {
    if (0 == strcmp(ub_name, "normal_texture_vs_params")) {
      return sizeof(normal_normal_texture_vs_params_t);
    }
  }
  if (SG_SHADERSTAGE_FS == stage) {
    if (0 == strcmp(ub_name, "normal_texture_fs_params")) {
      return sizeof(normal_normal_texture_fs_params_t);
    }
  }
  return 0;
}
static inline int normal_program_uniform_offset(sg_shader_stage stage, const char* ub_name, const char* u_name) {
  (void)stage; (void)ub_name; (void)u_name;
  if (SG_SHADERSTAGE_VS == stage) {
    if (0 == strcmp(ub_name, "normal_texture_vs_params")) {
      if (0 == strcmp(u_name, "un_mvp")) {
        return 0;
      }
      if (0 == strcmp(u_name, "model")) {
        return 64;
      }
      if (0 == strcmp(u_name, "tex0_mat")) {
        return 128;
      }
    }
  }
  if (SG_SHADERSTAGE_FS == stage) {
    if (0 == strcmp(ub_name, "normal_texture_fs_params")) {
      if (0 == strcmp(u_name, "diffuse")) {
        return 0;
      }
      if (0 == strcmp(u_name, "ambient")) {
        return 16;
      }
      if (0 == strcmp(u_name, "specular")) {
        return 32;
      }
      if (0 == strcmp(u_name, "emissive")) {
        return 48;
      }
      if (0 == strcmp(u_name, "light_dir")) {
        return 64;
      }
      if (0 == strcmp(u_name, "light_diffuse")) {
        return 80;
      }
      if (0 == strcmp(u_name, "light_ambient")) {
        return 96;
      }
      if (0 == strcmp(u_name, "light_specular")) {
        return 112;
      }
      if (0 == strcmp(u_name, "spec_power")) {
        return 124;
      }
      if (0 == strcmp(u_name, "un_alpha_test")) {
        return 128;
      }
      if (0 == strcmp(u_name, "material")) {
        return 132;
      }
    }
  }
  return -1;
}
static inline sg_shader_uniform_desc normal_program_uniform_desc(sg_shader_stage stage, const char* ub_name, const char* u_name) {
  (void)stage; (void)ub_name; (void)u_name;
  #if defined(__cplusplus)
  sg_shader_uniform_desc desc = {};
  #else
  sg_shader_uniform_desc desc = {0};
  #endif
  if (SG_SHADERSTAGE_VS == stage) {
    if (0 == strcmp(ub_name, "normal_texture_vs_params")) {
      if (0 == strcmp(u_name, "un_mvp")) {
        desc.name = "un_mvp";
        desc.type = SG_UNIFORMTYPE_MAT4;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "model")) {
        desc.name = "model";
        desc.type = SG_UNIFORMTYPE_MAT4;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "tex0_mat")) {
        desc.name = "tex0_mat";
        desc.type = SG_UNIFORMTYPE_MAT4;
        desc.array_count = 1;
        return desc;
      }
    }
  }
  if (SG_SHADERSTAGE_FS == stage) {
    if (0 == strcmp(ub_name, "normal_texture_fs_params")) {
      if (0 == strcmp(u_name, "diffuse")) {
        desc.name = "diffuse";
        desc.type = SG_UNIFORMTYPE_FLOAT4;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "ambient")) {
        desc.name = "ambient";
        desc.type = SG_UNIFORMTYPE_FLOAT4;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "specular")) {
        desc.name = "specular";
        desc.type = SG_UNIFORMTYPE_FLOAT4;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "emissive")) {
        desc.name = "emissive";
        desc.type = SG_UNIFORMTYPE_FLOAT4;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "light_dir")) {
        desc.name = "light_dir";
        desc.type = SG_UNIFORMTYPE_FLOAT3;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "light_diffuse")) {
        desc.name = "light_diffuse";
        desc.type = SG_UNIFORMTYPE_FLOAT3;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "light_ambient")) {
        desc.name = "light_ambient";
        desc.type = SG_UNIFORMTYPE_FLOAT3;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "light_specular")) {
        desc.name = "light_specular";
        desc.type = SG_UNIFORMTYPE_FLOAT3;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "spec_power")) {
        desc.name = "spec_power";
        desc.type = SG_UNIFORMTYPE_FLOAT;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "un_alpha_test")) {
        desc.name = "un_alpha_test";
        desc.type = SG_UNIFORMTYPE_FLOAT;
        desc.array_count = 1;
        return desc;
      }
      if (0 == strcmp(u_name, "material")) {
        desc.name = "material";
        desc.type = SG_UNIFORMTYPE_INT;
        desc.array_count = 1;
        return desc;
      }
    }
  }
  return desc;
}
